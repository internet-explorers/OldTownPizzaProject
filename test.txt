// What i used to commit changes
cd OldTownPizzaScheduler
git add --all
git status
git commit -m "description"
git push

//creating a branch
git branch otpschedv1

// What i used to delete the submodule and recreate it to view it in github

//Basically the issue behind it:
//If you don't have a .gitmodules file in your main repo, that special entry is typical of adding a nested repo: check if your dist/ folder has itself a .git/ subfolder.
//It is not a sub-folder, but a special entry in the index which marks it as a submodule-like.

git rm --cached OldTownPizzaScheduler
git commit -m "Remove submodule entry"
rm -Rf OldTownPizzaScheduler/.git
git add OldTownPizzaScheduler
git commit -m "Add OldTownPizzaScheduler plain subfolder"
git push



//If it has error running the server or bc some other user might have it open already

rvm get stable --auto-dotfiles
export PATH="$PATH:/environment/OldTownPizzaScheduler"


git init    //initializes a new repository
git status  //displays all the updated staged and commits
git add "filename"  //stages a file to be commited
git add .       //stages all the files that have been changed
git commit -m "message" //commits a file to be pushed
git log     //displays all the commits history
git show HEAD   //shows HEAD which is the current commit it is pointing to
git checkout "hash"     //changes to the hash commit it is assigned
git checkout master     //changes to the latest commit
git tag "tagname"       //whatever commit you are in, you can create a tag so you dont have to remember the hash
git branch              //displays all the branch you have created with * being the current branch
git branch "branchname" //creates a new branch
git checkout "branchname" //changes to a different branch you request
git merge master        //if in another branch, merging it with master able to push files

git fetch origin master //bring changes to a branch in our local repo
git merge origin/master master  //bring the changes we fetched into origin/master to master

