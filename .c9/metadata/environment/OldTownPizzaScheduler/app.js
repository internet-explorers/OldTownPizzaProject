{"changed":true,"filter":false,"title":"app.js","tooltip":"/OldTownPizzaScheduler/app.js","value":"var bodyParser = require(\"body-parser\");\nvar express = require(\"express\");\nvar app = express();\nvar path = require('path');\nvar mysql=require('mysql');\n\n//This creates the connection to mysql\nvar db = mysql.createConnection({\n     host      : 'awstest.cftyuv7rvxtd.us-west-2.rds.amazonaws.com',\n     user      : 'user',\n     password  : 'password',\n     database  : 'awsTest'\n});\n\n//Confirmation that MySql is connected\ndb.connect((err) => {\n     if(err){\n          throw err;\n     }\n     console.log(\"MySql Connected...\");\n});\n\n//View engine\napp.set(\"view engine\", \"ejs\");\napp.set('views', path.join(__dirname, 'views'));\n\n//Bodyparser Middleware\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: true}));\n\n//Set static path used for css and whatnot\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.get('/', function(req, res){\n    res.render(\"indexNotUser\");\n});\n\napp.get('/home', function(req,res){\n     res.render(\"indexIsUser\");\n});\n\napp.get('/login', function(req, res){\n    res.render(\"login\");\n});\n\napp.get(\"/signup\", function(req, res) {\n     res.render(\"signup\");\n});\n\napp.get('/announcements', function(req, res){\n    res.render(\"announcements\");\n});\n\napp.get('/mybudget', function(req, res){\n    res.render('budget');\n});\n\napp.get('/account', function(req, res){\n    res.render('account');\n});\napp.get('/schedule', function(req, res){\n    res.render(\"schedule\");\n});\n\napp.get('/calendar', function(req, res){\n    res.render(\"calendar\");\n});\napp.get('/arcade', function(req, res){\n    res.render(\"arcade\");\n});\napp.get('/messages', function(req, res){\n    res.render(\"messages\");\n});\n\napp.get('/oldMessage', function(req, res){\n    res.render(\"oldMessage\");\n});\n\napp.get(\"/logout\", function(req, res){\n    res.redirect(\"/login\");\n});\n\n//intakes a username and password in login page\n/*req.body.(name exactly the same as we set it to in the ejs file) */\napp.post('/login', function(req, res){\n     var loginUserName = req.body.loginUN;\n     var loginPassword = req.body.loginPW;\n     \n     //if username and password is inside the table then pop it out into a query \n     //var loginSql = \"Select Count(*) as count from users WHERE Username = ('\"+loginUserName+\"') AND Password = ('\"+loginPassword+\"')\";\n     var loginSql = \"Select Count(*) as count from users WHERE Username = ? AND Password = ?\";\n      \n \n     db.query(loginSql,\n          [\n               loginUserName,\n               loginPassword\n          ],\n          function(err, data) {\n               if(err){\n                    console.log(err);\n                    \n               } else {\n                    if (data[0].count > 0) {\n                         console.log(\"entry found\");\n                         console.log(loginSql);\n                         res.render('loginSuccess');\n                    } else {\n                         console.log(\"entry not found\");\n                         console.log(loginSql);\n                         res.render('loginFail');\n                    }\n               }\n         }\n     );\n     \n     //inputs the loginSql query to output if was passed through correctly\n     /*db.query(loginSql, function(err, data) {\n         if(err){\n              console.log(err);\n         }else{\n               if (data[0].count > 0) {\n                    console.log(\"entry found\");\n                    console.log(loginSql);\n                     res.render('indexIsUser');\n               } else {\n                    console.log(\"entry not found\");\n                    console.log(loginSql);\n                    res.render('login');\n               }\n         }\n     });*/\n});\n\n//posts the info back to the database when user created\napp.post('/signup', function(req, res){\n     var name = req.body.name;\n     var username = req.body.usernm;\n     var password = req.body.pw;\n     var email = req.body.email;\n     var phoneNo = req.body.phone;\n     //var signupSql = \"INSERT INTO users (Name, Username, Password, Email, PhoneNo) VALUES ('\"+name+\"', '\"+username+\"', '\"+password+\"', '\"+email+\"', '\"+phoneNo+\"')\";\n     var signupSql = \"INSERT INTO users (Name, Username, Password, Email, PhoneNo) VALUES (?,?,?,?,?)\";\n     //console.log(name, username, password, email, phoneNo);\n     \n     db.query(signupSql,\n          [\n               name,\n               username,\n               password,\n               email,\n               phoneNo\n          ],\n          function(err, data) {\n               if(err){\n                    console.log(\"username already taken\");\n                    res.render('signupFailed');\n               } else {\n                    console.log(\"successful entry\");\n                    res.render('signupSuccess');\n               }\n         }\n     );\n          \n     /*db.query(sql, function(err, data) {\n          if(err) throw err;\n          else{\n               console.log(\"successful entry\");\n               res.render('login');\n          }\n     });*/\n});\n\napp.post(\"/calendar\", function(req, res){\n     res.send('calendar');\n});\n\napp.listen(process.env.PORT, process.env.IP, function(){\n    console.log(\"The server has started\");\n});","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":3,"column":27},"end":{"row":4,"column":0},"action":"remove","lines":["",""],"id":1,"ignore":true}]]},"ace":{"folds":[],"scrolltop":493,"scrollleft":0,"selection":{"start":{"row":91,"column":6},"end":{"row":91,"column":6},"isBackwards":false},"options":{"tabSize":5,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1552191739138}